   Compiling thoughts v0.1.0 (/home/coal/Coding/Rust/thoughts)
warning: unused import: `shellexpand::env`
 --> src/config.rs:5:5
  |
5 | use shellexpand::env;
  |     ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `props`
   --> src/main.rs:268:16
    |
268 | fn NoteContent(props: &NoteContentProps) -> impl Into<AnyElement<'static>> {
    |                ^^^^^ help: if this is intentional, prefix it with an underscore: `_props`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: fields `is_favorite` and `modified_at` are never read
   --> src/main.rs:237:5
    |
235 | struct NoteListEntryProps {
    |        ------------------ fields in this struct
236 |     width: u16,
237 |     is_favorite: bool,
    |     ^^^^^^^^^^^
238 |     modified_at: u64,
    |     ^^^^^^^^^^^
    |
    = note: `NoteListEntryProps` has a derived impl for the trait `Default`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: field `width` is never read
   --> src/main.rs:264:5
    |
263 | struct NoteContentProps {
    |        ---------------- field in this struct
264 |     width: u16,
    |     ^^^^^
    |
    = note: `NoteContentProps` has a derived impl for the trait `Default`, but this is intentionally ignored during dead code analysis

warning: fields `title`, `created_at`, and `modified_at` are never read
  --> src/database.rs:14:5
   |
13 | pub struct Entry {
   |            ----- fields in this struct
14 |     title: String,
   |     ^^^^^
...
19 |     created_at: u64,
   |     ^^^^^^^^^^
20 |     modified_at: u64,
   |     ^^^^^^^^^^^
   |
   = note: `Entry` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unused `Result` that must be used
  --> src/database.rs:70:13
   |
70 |             self.write_entry(&parsed_entry);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
   = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
   |
70 |             let _ = self.write_entry(&parsed_entry);
   |             +++++++

warning: `thoughts` (bin "thoughts") generated 6 warnings (run `cargo fix --bin "thoughts"` to apply 1 suggestion)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.32s
     Running `target/debug/thoughts`
69
width remaining: 248
69
width remaining: 248
